service: example
frameworkVersion: '3'

params:
  default:
    assetsBucket: assets.example.com
  production:
    appUrl: https://example.com
    debug: false
    logLevel: info
  staging:
    appUrl: https://staging.example.com
    debug: true
    queue: null
    logLevel: debug

provider:
  name: aws
  region: us-east-1
  stage: staging
  runtime: provided.al2
  environment:
    APP_URL: ${param:appUrl}
    APP_ENV: ${sls:stage}
    APP_DEBUG: ${param:debug}
    ASSET_URL: https://${param:assetsBucket}/${sls:instanceId}
    LOG_LEVEL: ${param:logLevel}
    QUEUE_CONNECTION: ${param:queue, 'sqs'}
    SQS_QUEUE: ${self:service}-${sls:stage}
    DYNAMODB_CACHE_TABLE: ${self:service}-${sls:stage}-cache
    MAINTENANCE_MODE: ${param:maintenance, null}
    # Use S3 for filesystem storage
    FILESYSTEM_DISK: s3
    AWS_BUCKET: !Ref StorageBucket
  iam:
    role:
      statements:
        - Effect: Allow
          Resource: !GetAtt CacheTable.Arn
          Action: [dynamodb:DescribeTable, dynamodb:Query, dynamodb:Scan, dynamodb:GetItem, dynamodb:PutItem, dynamodb:UpdateItem, dynamodb:DeleteItem]
        - Effect: Allow
          Resource: !GetAtt Queue.Arn
          Action: [sqs:GetQueueUrl, sqs:GetQueueAttributes, sqs:SendMessage, sqs:receiveMessage, sqs:DeleteMessage, sqs:PurgeQueue]
        # Allow Lambda to read and write files in the S3 storage bucket
        - Effect: Allow
          Action: s3:*
          Resource:
            - !Sub '${StorageBucket.Arn}' # the storage bucket
            - !Sub '${StorageBucket.Arn}/*' # and everything inside

plugins:
  - ./vendor/bref/bref
  - serverless-scriptable-plugin

functions:
  web:
    handler: Bref\LaravelBridge\Http\OctaneHandler
    timeout: 20
    environment:
      BREF_LOOP_MAX: 250
      BREF_BINARY_RESPONSES: 1
    layers:
      - ${bref:layer.php-82}
    events:
      - httpApi: '*'

  cli:
    handler: artisan
    timeout: 720
    layers:
      - ${bref:layer.php-82}
      - ${bref:layer.console}
    events:
      - schedule:
          rate: rate(1 minute)
          input: '"schedule:run"'

  queue:
    handler: Bref\LaravelBridge\Queue\QueueHandler
    timeout: 59
    layers:
      - ${bref:layer.php-82}
    events:
      - sqs:
          arn: !GetAtt Queue.Arn
          batchSize: 1
          maximumBatchingWindow: 60

package:
  patterns:
    - '!.*/**'
    - '!node_modules'
    - '!public/assets'
    - '!public/storage'
    - '!public/vendor'
    - 'public/vendor/**/mix-manifest.json'
    - '!resources/css'
    - '!resources/js'
    - '!storage/framework'
    - '!storage/logs'
    - '!tests'
    - '!composer.lock'
    - '!package-lock.json'

custom:
  scriptable:
    hooks:
      after:package:createDeploymentArtifacts:
        - aws s3 cp public/ s3://${param:assetsBucket}/${sls:instanceId}/ --recursive --only-show-errors --acl=public-read --exclude="*.php"
      after:deploy:deploy:
        - vendor/bin/bref cli ${self:service}-${sls:stage}-cli -- migrate --force

resources:
  Resources:
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-cache
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires_at
          Enabled: true
    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}
        VisibilityTimeout: 70
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        Description: Storage bucket for the Laravel application
